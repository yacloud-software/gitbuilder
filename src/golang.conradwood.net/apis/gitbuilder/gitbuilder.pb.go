// Code generated by protoc-gen-go.
// source: protos/golang.conradwood.net/apis/gitbuilder/gitbuilder.proto
// DO NOT EDIT!

/*
Package gitbuilder is a generated protocol buffer package.

It is generated from these files:
	protos/golang.conradwood.net/apis/gitbuilder/gitbuilder.proto

It has these top-level messages:
	BuildRequest
	BuildResponse
	LocalRepo
	LocalRepoList
*/
package gitbuilder

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BuildRequest struct {
	GitURL       string   `protobuf:"bytes,1,opt,name=GitURL" json:"GitURL,omitempty"`
	FetchURLS    []string `protobuf:"bytes,2,rep,name=FetchURLS" json:"FetchURLS,omitempty"`
	CommitID     string   `protobuf:"bytes,3,opt,name=CommitID" json:"CommitID,omitempty"`
	BuildNumber  uint64   `protobuf:"varint,4,opt,name=BuildNumber" json:"BuildNumber,omitempty"`
	RepositoryID uint64   `protobuf:"varint,5,opt,name=RepositoryID" json:"RepositoryID,omitempty"`
	RepoName     string   `protobuf:"bytes,6,opt,name=RepoName" json:"RepoName,omitempty"`
	ArtefactName string   `protobuf:"bytes,7,opt,name=ArtefactName" json:"ArtefactName,omitempty"`
}

func (m *BuildRequest) Reset()                    { *m = BuildRequest{} }
func (m *BuildRequest) String() string            { return proto.CompactTextString(m) }
func (*BuildRequest) ProtoMessage()               {}
func (*BuildRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BuildRequest) GetGitURL() string {
	if m != nil {
		return m.GitURL
	}
	return ""
}

func (m *BuildRequest) GetFetchURLS() []string {
	if m != nil {
		return m.FetchURLS
	}
	return nil
}

func (m *BuildRequest) GetCommitID() string {
	if m != nil {
		return m.CommitID
	}
	return ""
}

func (m *BuildRequest) GetBuildNumber() uint64 {
	if m != nil {
		return m.BuildNumber
	}
	return 0
}

func (m *BuildRequest) GetRepositoryID() uint64 {
	if m != nil {
		return m.RepositoryID
	}
	return 0
}

func (m *BuildRequest) GetRepoName() string {
	if m != nil {
		return m.RepoName
	}
	return ""
}

func (m *BuildRequest) GetArtefactName() string {
	if m != nil {
		return m.ArtefactName
	}
	return ""
}

type BuildResponse struct {
	Stdout        []byte `protobuf:"bytes,1,opt,name=Stdout,proto3" json:"Stdout,omitempty"`
	Complete      bool   `protobuf:"varint,2,opt,name=Complete" json:"Complete,omitempty"`
	ResultMessage string `protobuf:"bytes,3,opt,name=ResultMessage" json:"ResultMessage,omitempty"`
	Success       bool   `protobuf:"varint,4,opt,name=Success" json:"Success,omitempty"`
	LogMessage    string `protobuf:"bytes,5,opt,name=LogMessage" json:"LogMessage,omitempty"`
}

func (m *BuildResponse) Reset()                    { *m = BuildResponse{} }
func (m *BuildResponse) String() string            { return proto.CompactTextString(m) }
func (*BuildResponse) ProtoMessage()               {}
func (*BuildResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BuildResponse) GetStdout() []byte {
	if m != nil {
		return m.Stdout
	}
	return nil
}

func (m *BuildResponse) GetComplete() bool {
	if m != nil {
		return m.Complete
	}
	return false
}

func (m *BuildResponse) GetResultMessage() string {
	if m != nil {
		return m.ResultMessage
	}
	return ""
}

func (m *BuildResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *BuildResponse) GetLogMessage() string {
	if m != nil {
		return m.LogMessage
	}
	return ""
}

type LocalRepo struct {
	URL       string   `protobuf:"bytes,1,opt,name=URL" json:"URL,omitempty"`
	FetchURLs []string `protobuf:"bytes,2,rep,name=FetchURLs" json:"FetchURLs,omitempty"`
	InUse     bool     `protobuf:"varint,3,opt,name=InUse" json:"InUse,omitempty"`
	WorkDir   string   `protobuf:"bytes,4,opt,name=WorkDir" json:"WorkDir,omitempty"`
	Created   uint32   `protobuf:"varint,5,opt,name=Created" json:"Created,omitempty"`
	Released  uint32   `protobuf:"varint,6,opt,name=Released" json:"Released,omitempty"`
}

func (m *LocalRepo) Reset()                    { *m = LocalRepo{} }
func (m *LocalRepo) String() string            { return proto.CompactTextString(m) }
func (*LocalRepo) ProtoMessage()               {}
func (*LocalRepo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *LocalRepo) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *LocalRepo) GetFetchURLs() []string {
	if m != nil {
		return m.FetchURLs
	}
	return nil
}

func (m *LocalRepo) GetInUse() bool {
	if m != nil {
		return m.InUse
	}
	return false
}

func (m *LocalRepo) GetWorkDir() string {
	if m != nil {
		return m.WorkDir
	}
	return ""
}

func (m *LocalRepo) GetCreated() uint32 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *LocalRepo) GetReleased() uint32 {
	if m != nil {
		return m.Released
	}
	return 0
}

type LocalRepoList struct {
	Repos []*LocalRepo `protobuf:"bytes,1,rep,name=Repos" json:"Repos,omitempty"`
}

func (m *LocalRepoList) Reset()                    { *m = LocalRepoList{} }
func (m *LocalRepoList) String() string            { return proto.CompactTextString(m) }
func (*LocalRepoList) ProtoMessage()               {}
func (*LocalRepoList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LocalRepoList) GetRepos() []*LocalRepo {
	if m != nil {
		return m.Repos
	}
	return nil
}

func init() {
	proto.RegisterType((*BuildRequest)(nil), "gitbuilder.BuildRequest")
	proto.RegisterType((*BuildResponse)(nil), "gitbuilder.BuildResponse")
	proto.RegisterType((*LocalRepo)(nil), "gitbuilder.LocalRepo")
	proto.RegisterType((*LocalRepoList)(nil), "gitbuilder.LocalRepoList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GitBuilder service

type GitBuilderClient interface {
	// build something. Note that this RPC might take several minutes to complete
	Build(ctx context.Context, in *BuildRequest, opts ...grpc.CallOption) (GitBuilder_BuildClient, error)
	// get information about the repos on disk
	GetLocalRepos(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*LocalRepoList, error)
}

type gitBuilderClient struct {
	cc *grpc.ClientConn
}

func NewGitBuilderClient(cc *grpc.ClientConn) GitBuilderClient {
	return &gitBuilderClient{cc}
}

func (c *gitBuilderClient) Build(ctx context.Context, in *BuildRequest, opts ...grpc.CallOption) (GitBuilder_BuildClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GitBuilder_serviceDesc.Streams[0], c.cc, "/gitbuilder.GitBuilder/Build", opts...)
	if err != nil {
		return nil, err
	}
	x := &gitBuilderBuildClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GitBuilder_BuildClient interface {
	Recv() (*BuildResponse, error)
	grpc.ClientStream
}

type gitBuilderBuildClient struct {
	grpc.ClientStream
}

func (x *gitBuilderBuildClient) Recv() (*BuildResponse, error) {
	m := new(BuildResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gitBuilderClient) GetLocalRepos(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*LocalRepoList, error) {
	out := new(LocalRepoList)
	err := grpc.Invoke(ctx, "/gitbuilder.GitBuilder/GetLocalRepos", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GitBuilder service

type GitBuilderServer interface {
	// build something. Note that this RPC might take several minutes to complete
	Build(*BuildRequest, GitBuilder_BuildServer) error
	// get information about the repos on disk
	GetLocalRepos(context.Context, *common.Void) (*LocalRepoList, error)
}

func RegisterGitBuilderServer(s *grpc.Server, srv GitBuilderServer) {
	s.RegisterService(&_GitBuilder_serviceDesc, srv)
}

func _GitBuilder_Build_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BuildRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GitBuilderServer).Build(m, &gitBuilderBuildServer{stream})
}

type GitBuilder_BuildServer interface {
	Send(*BuildResponse) error
	grpc.ServerStream
}

type gitBuilderBuildServer struct {
	grpc.ServerStream
}

func (x *gitBuilderBuildServer) Send(m *BuildResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GitBuilder_GetLocalRepos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitBuilderServer).GetLocalRepos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitbuilder.GitBuilder/GetLocalRepos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitBuilderServer).GetLocalRepos(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _GitBuilder_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gitbuilder.GitBuilder",
	HandlerType: (*GitBuilderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLocalRepos",
			Handler:    _GitBuilder_GetLocalRepos_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Build",
			Handler:       _GitBuilder_Build_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/golang.conradwood.net/apis/gitbuilder/gitbuilder.proto",
}

func init() {
	proto.RegisterFile("protos/golang.conradwood.net/apis/gitbuilder/gitbuilder.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 483 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x53, 0xcd, 0x8a, 0xd4, 0x40,
	0x10, 0xa6, 0x77, 0x36, 0xbb, 0x93, 0xda, 0x09, 0x48, 0xa3, 0xd2, 0x0e, 0xb2, 0x84, 0xe0, 0x21,
	0x20, 0x64, 0x64, 0xbd, 0x78, 0x50, 0xc1, 0xd9, 0xc1, 0x61, 0x20, 0xee, 0xa1, 0x87, 0xd1, 0x73,
	0x26, 0x29, 0x63, 0x63, 0x92, 0x8e, 0xe9, 0x0e, 0xe2, 0x0b, 0xf8, 0x1e, 0xe2, 0xbb, 0xf9, 0x1c,
	0x92, 0xce, 0xcf, 0x24, 0x8b, 0x78, 0x4a, 0x7f, 0x5f, 0xd5, 0x97, 0xaa, 0xaf, 0xab, 0x0b, 0xde,
	0x94, 0x95, 0xd4, 0x52, 0xad, 0x52, 0x99, 0x45, 0x45, 0x1a, 0xc4, 0xb2, 0xa8, 0xa2, 0xe4, 0xbb,
	0x94, 0x49, 0x50, 0xa0, 0x5e, 0x45, 0xa5, 0x50, 0xab, 0x54, 0xe8, 0x63, 0x2d, 0xb2, 0x04, 0xab,
	0xd1, 0x31, 0x30, 0x3a, 0x0a, 0x27, 0x66, 0x19, 0xfc, 0xe7, 0x1f, 0xb1, 0xcc, 0x73, 0x59, 0x74,
	0x9f, 0x56, 0xeb, 0xfd, 0x21, 0xb0, 0x58, 0x37, 0x5a, 0x8e, 0xdf, 0x6a, 0x54, 0x9a, 0x3e, 0x86,
	0x8b, 0xad, 0xd0, 0x07, 0x1e, 0x32, 0xe2, 0x12, 0xdf, 0xe6, 0x1d, 0xa2, 0x4f, 0xc1, 0x7e, 0x8f,
	0x3a, 0xfe, 0x72, 0xe0, 0xe1, 0x9e, 0x9d, 0xb9, 0x33, 0xdf, 0xe6, 0x27, 0x82, 0x2e, 0x61, 0x7e,
	0x2b, 0xf3, 0x5c, 0xe8, 0xdd, 0x86, 0xcd, 0x8c, 0x6e, 0xc0, 0xd4, 0x85, 0x2b, 0x53, 0xe1, 0xae,
	0xce, 0x8f, 0x58, 0xb1, 0x73, 0x97, 0xf8, 0xe7, 0x7c, 0x4c, 0x51, 0x0f, 0x16, 0x1c, 0x4b, 0xa9,
	0x84, 0x96, 0xd5, 0x8f, 0xdd, 0x86, 0x59, 0x26, 0x65, 0xc2, 0x35, 0x15, 0x1a, 0x7c, 0x17, 0xe5,
	0xc8, 0x2e, 0xda, 0x0a, 0x3d, 0x6e, 0xf4, 0xef, 0x2a, 0x8d, 0x9f, 0xa3, 0x58, 0x9b, 0xf8, 0xa5,
	0x89, 0x4f, 0x38, 0xef, 0x37, 0x01, 0xa7, 0x33, 0xaa, 0x4a, 0x59, 0x28, 0x6c, 0x9c, 0xee, 0x75,
	0x22, 0x6b, 0x6d, 0x9c, 0x2e, 0x78, 0x87, 0x3a, 0x2f, 0x65, 0x86, 0x1a, 0xd9, 0x99, 0x4b, 0xfc,
	0x39, 0x1f, 0x30, 0x7d, 0x06, 0x0e, 0x47, 0x55, 0x67, 0xfa, 0x03, 0x2a, 0x15, 0xa5, 0xd8, 0x99,
	0x9d, 0x92, 0x94, 0xc1, 0xe5, 0xbe, 0x8e, 0x63, 0x54, 0xca, 0xb8, 0x9d, 0xf3, 0x1e, 0xd2, 0x6b,
	0x80, 0x50, 0xa6, 0xbd, 0xd8, 0x32, 0xe2, 0x11, 0xe3, 0xfd, 0x22, 0x60, 0x87, 0x32, 0x8e, 0xb2,
	0xc6, 0x1b, 0x7d, 0x00, 0xb3, 0xd3, 0x20, 0x66, 0xf7, 0xa6, 0xa0, 0xee, 0x4f, 0x41, 0xd1, 0x87,
	0x60, 0xed, 0x8a, 0x83, 0x6a, 0xbb, 0x9a, 0xf3, 0x16, 0x34, 0xdd, 0x7c, 0x92, 0xd5, 0xd7, 0x8d,
	0x68, 0xef, 0xde, 0xe6, 0x3d, 0x6c, 0x22, 0xb7, 0x15, 0x46, 0x1a, 0x13, 0xd3, 0x8a, 0xc3, 0x7b,
	0xd8, 0xde, 0x76, 0x86, 0x91, 0xc2, 0xc4, 0xdc, 0xb6, 0xc3, 0x07, 0xec, 0xbd, 0x06, 0x67, 0x68,
	0x31, 0x14, 0x4a, 0xd3, 0xe7, 0x60, 0x99, 0x51, 0x31, 0xe2, 0xce, 0xfc, 0xab, 0x9b, 0x47, 0xc1,
	0xe8, 0x85, 0x0e, 0x99, 0xbc, 0xcd, 0xb9, 0xf9, 0x49, 0x00, 0xb6, 0x42, 0xaf, 0xdb, 0x38, 0x7d,
	0x0b, 0x96, 0x39, 0x52, 0x36, 0x56, 0x8d, 0x5f, 0xe4, 0xf2, 0xc9, 0x3f, 0x22, 0xed, 0x08, 0x5f,
	0x10, 0xfa, 0x0a, 0x9c, 0x2d, 0xea, 0xa1, 0x8a, 0xa2, 0x8b, 0xa0, 0x7b, 0xdf, 0x1f, 0xa5, 0x48,
	0xa6, 0xda, 0x49, 0xd7, 0x6b, 0x17, 0xae, 0x0b, 0xd4, 0xe3, 0x45, 0x69, 0x96, 0x64, 0x94, 0x7f,
	0xbc, 0x30, 0x2b, 0xf2, 0xf2, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xad, 0x55, 0x42, 0xcb, 0x9f,
	0x03, 0x00, 0x00,
}
