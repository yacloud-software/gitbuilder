syntax = "proto3";

package gitbuilder;
option go_package = "golang.conradwood.net/apis/gitbuilder";
option java_package = "net.conradwood.apis.gitbuilder";
import "golang.conradwood.net/apis/common/common.proto";
message FetchURL {
  string URL=1; // from where?
  string RefSpec=2; // what ref? (see man git-fetch)
}
message BuildRequest {
  string GitURL=1; // the git repository url
  repeated FetchURL FetchURLs=2; // any fetch urls that need to be applied before build (for gerrit patches)
  string CommitID=3; // the commit id to build
  uint64 BuildNumber=4; // the buildnumber for this build
  uint64 RepositoryID=5; // the build scripts might use this
  string RepoName=6; // the buildscripts might use this
  string ArtefactName=7; // the upload script uses this to upload to buildrepo
  repeated string ExcludeBuildScripts=8; // do not run these rules, despite what is configured in the repository
  repeated string IncludeBuildScripts=9; // do run these rules, in addition to what is configured in the repository
  bool RequiresDeepClone=10; // if true, run git clone with all commits and branches
  uint64 ArtefactID=11; // passed through to buildrepo
}
message BuildResponse {
  bytes Stdout=1;// the output of the build process streamed back
  bool Complete=2; // if true this is the last message
  string ResultMessage=3; // a human-readable message
  bool Success=4; // if true the build succeeded
  string LogMessage=5; // the builder sends back the logmessage of the commit it built
  FileTransferPart FileTransfer=6; // we might be transferring one or more files as part of the response
}
message LocalRepo {
  string URL=1;
  repeated FetchURL FetchURLs=2;
  bool InUse=3;
  string WorkDir=4;
  uint32 Created=5;
  uint32 Released=6;
}
message LocalRepoList {
  repeated LocalRepo Repos=1;
}
message BuildScriptList {
  repeated string Names=1;
}
message FileTransferPart {
  string Filename=1; // relative path. file on disk will be opened on first access. Any file previously open, will be closed
  bytes Data=2; // data to write to file
  uint32 Permissions=3; // unix permissions
}

enum ReturnSet {
  RETURN_ALL_CHANGED=0; // all files that changed during build
  RETURN_DIST=1; // all files in "dist/"
  RETURN_BUNDLE=2; // all files in dist, extra, template etc..
  RETURN_BUNDLE_CHANGED=3; // all files in dist, extra, template etc.. which have changed
}
message BuildLocalRequest {
  uint64 RepositoryID=1; // the build scripts might use this
  string RepoName=2; // the buildscripts might use this
  repeated string ExcludeBuildScripts=3; // do not run these rules, despite what is configured in the repository
  repeated string IncludeBuildScripts=4; // do run these rules, in addition to what is configured in the repository
  uint64 ArtefactID=5; // passed through to build
  string ArtefactName=6;// passed through to build
  uint64 BuildNumber=7; // passed through to build (and injected into the binaries)
  ReturnSet Return=8;
}

message BuildLocalFiles {
  FileTransferPart FileTransfer=1;
  BuildLocalRequest Request=2; // if that is sent the build starts (and all files will be closed)
}

message BuildRuleDef_Go {
  bool CGOEnabled=1;
  repeated string ExcludeDirs=2;
}
message BuildRuleDef_C {
  string CompilerVersion=2; // default "latest"
  string OS=3; // default "linux"
  string CPU=4; // default "amd64"
}

message BuildRuleDef {
  string BuildType=1; // any of the supported rules, e.g. "STANDARD_GO"
  string BuildOS=2; // e.g. "debian-12.4" 
  BuildRuleDef_Go Go=3;
  BuildRuleDef_C C=4;
}

// yaml file defining build rules
message BuildRules {
  string PreBuild=1; // typically and default "reject"
  string PostCommit=2; // typically and default "do"
  repeated BuildRuleDef Rules=3;
}

// this is doing the actual build. It checksout a git repository, runs the build
// and uploads the artefacts
service GitBuilder {
  // build something. Note that this RPC might take several minutes to complete
  rpc Build(BuildRequest) returns (stream BuildResponse);
  // build something that exists only on the local file system. return the files that would otherwise be uploaded to buildrepo to the client instead
  rpc BuildFromLocalFiles(stream BuildLocalFiles) returns (stream BuildResponse);
  // get information about the repos on disk
  rpc GetLocalRepos(common.Void) returns (LocalRepoList);
  // get "known" build scripts
  rpc GetBuildScripts(common.Void) returns (BuildScriptList);
}
